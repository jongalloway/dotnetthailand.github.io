{"componentChunkName":"component---src-templates-docs-js","path":"/web-frameworks/orchard-core-cms/read-a-file-in-an-orchard-core-module","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"5975a751-1564-5a08-8223-4b603b375e44","title":"Read a file in an Orchard Core module","slug":"/web-frameworks/orchard-core-cms/read-a-file-in-an-orchard-core-module"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Read a file in an Orchard Core module\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Here is a code snippet to read a file which is in a root of a module project:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cs\"\n  }, \"// Migrations.cs\\npublic Task<string> ReadFileAsync(){\\n    // _typeFeatureProvider from constructor DI\\n    var featureInfo = _typeFeatureProvider.GetFeatureForDependency(typeof(Migrations));\\n\\n    // featureInfo.Extension.SubPath returns /Areas/ModuleName.\\n    // content.txt is in a root of a module project.\\n    var filePath = Path.Combine(featureInfo.Extension.SubPath, \\\"content.txt\\\").Replace('\\\\\\\\', '/');\\n\\n    // We need to get a file info from hostingEnvironment and use it to create a file stream.\\n    var fileInfo = _hostingEnvironment.ContentRootFileProvider.GetFileInfo(filePath);\\n\\n    using var stream = fileInfo.CreateReadStream();\\n    using var reader = new StreamReader(stream);\\n\\n    // Just return a task.\\n    return reader.ReadToEndAsync();\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"timeToRead":1,"parent":{"__typename":"File","relativePath":"web-frameworks/orchard-core-cms/read-a-file-in-an-orchard-core-module.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"4f1134accef463612ee63776f407d76ae8ca575f","date":"2022-01-30 12:02"}},"pageContext":{"id":"5975a751-1564-5a08-8223-4b603b375e44"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}