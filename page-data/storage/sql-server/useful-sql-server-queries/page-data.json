{"componentChunkName":"component---src-templates-docs-js","path":"/storage/sql-server/useful-sql-server-queries","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"a29c6dab-431d-5112-b3db-5cc66604073e","title":"Useful SQL Server queries","slug":"/storage/sql-server/useful-sql-server-queries"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Useful SQL Server queries\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Drop all tables from a database\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"USE [database-name]\\nGO\\n\\n-- Disable all referential integrity constraints\\nEXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL'\\nGO\\n\\n-- Drop all tables\\nEXEC sp_MSforeachtable 'DROP TABLE ?'\\nGO\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Note!!!\"), \" If your database does not have \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sp_MSforeachtable\"), \" stored proc, you can use \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://gist.github.com/metaskills/893599\"\n  }, \"this script\"), \" to create it.\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Search text in all tables and columns\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"DECLARE @SearchStr nvarchar(100) = 'searched-text'\\nDECLARE @Results TABLE (ColumnName nvarchar(370),\\n    ColumnValue nvarchar(3630))\\n\\nSET NOCOUNT ON\\n\\nDECLARE @TableName nvarchar(256), @ColumnName nvarchar(128), @SearchStr2 nvarchar(110)\\nSET  @TableName = ''\\nSET @SearchStr2 = QUOTENAME('%' + @SearchStr + '%','''')\\n\\nWHILE @TableName IS NOT NULL\\nBEGIN\\n    SET @ColumnName = ''\\n    SET @TableName =\\n    (\\n        SELECT MIN(QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME))\\n        FROM INFORMATION_SCHEMA.TABLES\\n        WHERE TABLE_TYPE = 'BASE TABLE'\\n        AND QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) > @TableName\\n        AND OBJECTPROPERTY(OBJECT_ID(QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME)), 'IsMSShipped') = 0\\n    )\\n    WHILE (@TableName IS NOT NULL) AND (@ColumnName IS NOT NULL)\\n\\n    BEGIN\\n        SET @ColumnName =\\n        (\\n        SELECT MIN(QUOTENAME(COLUMN_NAME))\\n        FROM INFORMATION_SCHEMA.COLUMNS\\n        WHERE TABLE_SCHEMA = PARSENAME(@TableName, 2)\\n            AND TABLE_NAME = PARSENAME(@TableName, 1)\\n            AND DATA_TYPE IN ('char', 'varchar', 'nchar', 'nvarchar', 'int', 'decimal')\\n            AND QUOTENAME(COLUMN_NAME) > @ColumnName\\n        )\\n        IF @ColumnName IS NOT NULL\\n        BEGIN\\n            INSERT INTO @Results\\n            EXEC\\n            (\\n                'SELECT ''' + @TableName + '.' + @ColumnName + ''', LEFT(' + @ColumnName + ', 3630) ' +\\n                'FROM ' + @TableName + ' (NOLOCK) ' +\\n                'WHERE ' + @ColumnName + ' LIKE ' + @SearchStr2\\n            )\\n        END\\n    END\\nEND\\n\\nSELECT ColumnName, ColumnValue\\nFROM @Results\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#drop-all-tables-from-a-database","title":"Drop all tables from a database"},{"url":"#search-text-in-all-tables-and-columns","title":"Search text in all tables and columns"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"storage/sql-server/useful-sql-server-queries.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"4f1134accef463612ee63776f407d76ae8ca575f","date":"2022-01-30 12:02"}},"pageContext":{"id":"a29c6dab-431d-5112-b3db-5cc66604073e"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}