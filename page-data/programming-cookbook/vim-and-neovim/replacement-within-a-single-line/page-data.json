{"componentChunkName":"component---src-templates-docs-js","path":"/programming-cookbook/vim-and-neovim/replacement-within-a-single-line","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"9e0e4938-584b-5ca7-9075-04864025ae95","title":"Replacement within a single line","slug":"/programming-cookbook/vim-and-neovim/replacement-within-a-single-line"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Replacement within a single line\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Replacement within a single line\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Incase you want to search and replace some word in line of code\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"How to do with vim?\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Steps\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Example\\n\\nlet obj = {\\n  key1: 'value1',\\n  key2: 'value3',\\n  key3: 'value3',\\n};\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"drop cursor on line do you want to select\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \":s/key/value/g\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"then the line contain key get replace to value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Done!\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Example\\n\\nlet obj = {\\n  value1: 'value1',\\n  key2: 'value3',\\n  key3: 'value3',\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/8b1ae505c094fc401a09200bfcf967de/replacement_within_a_single_line.gif\",\n    \"alt\": \"demo\"\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#replacement-within-a-single-line","title":"Replacement within a single line"},{"url":"#how-to-do-with-vim","title":"How to do with vim?","items":[{"url":"#steps","title":"Steps"}]}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"programming-cookbook/vim-and-neovim/replacement-within-a-single-line.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"4f1134accef463612ee63776f407d76ae8ca575f","date":"2022-01-30 12:02"}},"pageContext":{"id":"9e0e4938-584b-5ca7-9075-04864025ae95"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}