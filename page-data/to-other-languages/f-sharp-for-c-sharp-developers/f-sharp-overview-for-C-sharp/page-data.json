{"componentChunkName":"component---src-templates-docs-js","path":"/to-other-languages/f-sharp-for-c-sharp-developers/f-sharp-overview-for-C-sharp","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"981d22a9-9968-5413-9499-be86b016671b","title":"F# Overview for C# developers","slug":"/to-other-languages/f-sharp-for-c-sharp-developers/f-sharp-overview-for-C-sharp"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"F# Overview for C# developers\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This page intends to overview F# features to you. Once you finish this, you should be able to write simple F# code with functions :)\"), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"F# Introduction\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \" The key difference between F# and C# is that F# is a function-first language, meaning it expects us to write code full of functions and lambdas, and less of classes or even none.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This article is not intended for introducing functional programming. I assume that the reader should have some knowledge about functional programming (i.e. its principles).\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Let's start from the high-level view...\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Project and file structure\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Here's the list of F# file extensions:\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"File Extension\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \".fs\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"F# source file\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \".fsx\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"F# script file\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \".fsproj\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"F# project file\")))), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fsx\"), \" is similar to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".csx\"), \" (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/archive/msdn-magazine/2016/january/essential-net-csharp-scripting\"\n  }, \"C# Script File\"), \") but it has a nice feature where you can reference libraries from nuget.org with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#r\"), \" directive in the file, pretty handy for writing a power script.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In .NET Core, you can run a script by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet fsi script.fsx\"), \" (and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet fsi\"), \" alone is for F# interactive mode).\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Project Structure\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Basically, F# project is very like C# project, just a group of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".fs\"), \" files but the big difference is on their distinct ideologies.  C# is OO language which usually has many classes, divided into namespaces or packages.  It doesn't matter how many \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".cs\"), \" files you have, when you compile them, it just becomes a pool of classes which can freely refer to each other (cyclic dependency!? no problem! \\uD83D\\uDE02).\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"F# is based on top-down, modular design. Functions are often put in modules, each module should be in its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".fs\"), \" file, and the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"order of files\"), \" are important!  Order of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"functions\"), \" in each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".fs\"), \" file is important as well, functions that are declared on top-most of file cannot refer to functions declared later.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For example, supposed that we have a F# project with two modules \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" and the project structure looks like following:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"MyProject.fsproj\\n   |- A.fs\\n   |- B.fs\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Any functions in module \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A.fs\"), \" cannot refer to anything in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B.fs\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Also, if module \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" has following functions:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-F#\"\n  }, \"let f() = g()       // compilation error!\\nlet g() = printfn \\\"I'm G\\\"\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"It won't work, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f()\"), \" won't recognize \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"g()\"), \".  Writing code in F# needs you to plan your code dependencies.. :)\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Program entrypoint\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In C# we need a static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" method defined as an entry point. Normally we often see this in a console program.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"// Program.cs\\nusing System;\\n\\nclass Program {\\n    static void Main(string[] args) {\\n        Console.WriteLine(\\\"Hello world!\\\");\\n    }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In F#, there are two ways to define an entrypoint...\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Top-level statements\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Does the topic sound familiar \\uD83E\\uDD2D? Yes, it's the new feature in C# 9 that I believe taking from F#.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-F#\"\n  }, \"// Program.fs\\nprintfn \\\"Hello world!\\\"\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Similar to C#, top-level statement style can be used only in the main program file.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Explicitly declaring an \\\"EntryPoint\\\"\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This one looks similar to C#'s.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-F#\"\n  }, \"// Program.fs\\n[<EntryPoint>]\\nlet mymain args =\\n    printfn \\\"Hello world!\\\"\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To make it more alike, it can also be..\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-F#\"\n  }, \"// Program.fs\\nmodule Program\\n\\nopen System\\n\\n[<EntryPoint>]\\nlet Main(args: string[]) =\\n    Console.WriteLine(\\\"Hello world!\\\")\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"F# vs C# syntaxes\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Using module / namespace\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Basically, F# \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open\"), \" keyword is like C# \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"using\"), \". We use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"using NameSpace.Name;\"), \" to include everything in that namespace, in F# we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open NameSpace.Name\"), \" instead. Note that F# languages doesn't use semi-colon to close statements like C#, though it has other meaning.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open\"), \" in F# not only for including things in namespaces, it's also used for including everything in a \\\"module\\\". You can simply think of F# module as a static class, this analogy works for me.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \".NET Attribute\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"F# uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[<Attribute>]\"), \" style to apply an attribute, where C# just uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Attribute]\"), \".  For multiple attributes, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[<Attribute1; Attribute2; Attribute3(Param=123)>]\"), \".  Another note, F# uses semi-colon for separating items, comma is preserved for tuple..\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Simple Function Declaration\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"F# uses keyword \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let\"), \" to define \\\"variable\\\" and function. Since in FP point-of-view, a function is just a value. Defining a function in F# is as same as defining a \\\"variable\\\".  (I know using the word \\\"variable\\\" here is technically wrong, that's why I put double-quote around the word but I'll omit it from now on.)\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Here, an example of defining a function and variable.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-F#\"\n  }, \"let PI = 3.141  // variable\\nlet radius x = x * PI / 180.0   // function\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"F# type interference is more powerful than C#, I believe, due to language's simpler grammar, so type annotation is often an option. From the example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" will be known as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"float\"), \" (which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"double\"), \" type in C#) because it deducts from type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PI\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"180.0\"), \".. Note that you can't write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let radius x = x * PI / 180\"), \" because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"180\"), \" is a literal of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int\"), \" and it doesn't work with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"float\"), \" type.  F# is type-strict language! (and hence more powerful type interence)\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"But if you want to annotate a type, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name: type\"), \" style (similar to TypeScript and many languages) to do it.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-F#\"\n  }, \"let PI: float = 3.141\\nlet radius (x: float) :float = x * PI / 180.0\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Technically, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"radius\"), \" is a lambda, this is like, tho not exactly, doing this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Func<double,double> radius = x => PI / 180;\"), \" in C#.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"printf, printfn\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you have C/C++ background, you will immediately familiar with the function name. It's quite same concept but with stronger-typed \\uD83D\\uDE0A\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-F#\"\n  }, \"open System\\n\\nConsole.WriteLine(\\\"There are {0} people in {1}.\\\", 10_000_000, \\\"Bangkok\\\")\\nprintfn \\\"There are %d people in %s.\\\" 10_000_000 \\\"Bangkok\\\"\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Those statements have the same output.  But \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"printfn\"), \" may look odd to ones who never heard of curry function style, which I will have another dedicated page for curry style.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Multi-variable Function (C# style)\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"C# Data Types Mappings\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#f-introduction","title":"F# Introduction"},{"url":"#project-and-file-structure","title":"Project and file structure","items":[{"url":"#project-structure","title":"Project Structure"}]},{"url":"#program-entrypoint","title":"Program entrypoint","items":[{"url":"#top-level-statements","title":"Top-level statements"},{"url":"#explicitly-declaring-an-entrypoint","title":"Explicitly declaring an \"EntryPoint\""}]},{"url":"#f-vs-c-syntaxes","title":"F# vs C# syntaxes","items":[{"url":"#using-module--namespace","title":"Using module / namespace"},{"url":"#net-attribute","title":".NET Attribute"},{"url":"#simple-function-declaration","title":"Simple Function Declaration"},{"url":"#printf-printfn","title":"printf, printfn"},{"url":"#multi-variable-function-c-style","title":"Multi-variable Function (C# style)"},{"url":"#c-data-types-mappings","title":"C# Data Types Mappings"}]}]},"timeToRead":3,"parent":{"__typename":"File","relativePath":"to-other-languages/f-sharp-for-c-sharp-developers/f-sharp-overview-for-C-sharp.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"4f1134accef463612ee63776f407d76ae8ca575f","date":"2022-01-30 12:02"}},"pageContext":{"id":"981d22a9-9968-5413-9499-be86b016671b"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}