{"componentChunkName":"component---src-templates-docs-js","path":"/to-other-languages/f-sharp-for-c-sharp-developers/f-sharp-styles","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"cb53c4e1-5e99-544b-9906-9f6f49d17b4c","title":"F# Styles","slug":"/to-other-languages/f-sharp-for-c-sharp-developers/f-sharp-styles"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"F# Styles\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 4\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This chapter focuses on F# programming style, which is basically functional traits of the language.\"), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Function call style\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Function call in F# doesn't need parenthesis.  Actually, F# sees all methods like a curry function, even if they come from C# library or BCL!  For example, instead of writing:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"Console.WriteLine(\\\"Hello World!\\\");\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In F#, we can remove the parathesis and semi-colon, as long as the function's parameters aren't ambiguous.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-fsharp\"\n  }, \"// it isn't ambiguous as it can match only one function signature out of several overloaded forms.\\nConsole.WriteLine \\\"Hello World!\\\"\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"However, if a method has many parameters, F# will perceive it as a function of a Tuple value and it needs parathesis to signify the tuple, as comma in F#\\nhas (alomost?) lowest operator precedence (in other words, lowest priority).\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So you can't do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine \\\"Hello {0}\\\", \\\"World\\\"\"), \", as it will be interpreted as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(Console.WriteLine \\\"Hello {0}\\\"), \\\"World\\\"\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unit * string\"), \" tuple type.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Class' constructor is automatically treated as a function in F#, so we don't need to use the keyword \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" in order to instantiate a class.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-fsharp\"\n  }, \"open System.Collections.Generic\\n\\nlet arrayList = List<int>()  // or new List<int>()\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"However, if the class implements \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDisposable\"), \", F# will issue a warning that you should use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" keyword to show an attention needed for this kind of object, which I don't see the point so I often suppress the warning (760).\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Recursive\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Good thing in any functional languages is tail-recursive optimization! In order to write a recursive function in F#, you need the keyword \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rec\"), \" after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let\"), \" declaration.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-fsharp\"\n  }, \"/// Call f() n times\\nlet rec repeatCall f n =\\n    if n > 0 then\\n        f()\\n        repeatCall f (n-1)  // tail-recursive\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \" In case you never heard of it, tail recursive is a kind of self calling without further processing from the return value. From the example, the return value, which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unit\"), \", is immediately used as a return value, not futhre calculation needed.  This is a kind of tail recursive.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \" Following example is not tail recursive:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-fsharp\"\n  }, \"let factorial n =\\n    if n = 0\\n    then 1\\n    else n * (factorial (n-1))\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Since the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"factorial (n-1)\"), \" is needed to do further calculation.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Forward pipe\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Backward pipe\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Point-free style (Tacit programming)\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Pattern Matching\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Error Handling\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Outro\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#function-call-style","title":"Function call style","items":[{"url":"#recursive","title":"Recursive"},{"url":"#forward-pipe","title":"Forward pipe"},{"url":"#backward-pipe","title":"Backward pipe"},{"url":"#point-free-style-tacit-programming","title":"Point-free style (Tacit programming)"}]},{"url":"#pattern-matching","title":"Pattern Matching"},{"url":"#error-handling","title":"Error Handling"},{"url":"#outro","title":"Outro"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"to-other-languages/f-sharp-for-c-sharp-developers/f-sharp-styles.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"4f1134accef463612ee63776f407d76ae8ca575f","date":"2022-01-30 12:02"}},"pageContext":{"id":"cb53c4e1-5e99-544b-9906-9f6f49d17b4c"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}