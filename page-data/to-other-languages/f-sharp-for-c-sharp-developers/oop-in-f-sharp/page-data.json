{"componentChunkName":"component---src-templates-docs-js","path":"/to-other-languages/f-sharp-for-c-sharp-developers/oop-in-f-sharp","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"00dc0ad1-2a8b-5d7c-9261-720bf49f1582","title":"Object-Oriented-Programming in F#","slug":"/to-other-languages/f-sharp-for-c-sharp-developers/oop-in-f-sharp"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Object-Oriented-Programming in F#\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Introduction\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"How to write a class in F#? This chapter explains Object-oriented \\\"capabilities\\\" in F#. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Warning\"), \", though, Object-Oriented feature is the second-class citizen in F#, meaning OOP model in F# is simpler than C#, for example there is no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"protected\"), \" access level in F#... \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OOP in F# is just for interoperation with C# libraries\"), \".\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Class\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Simple Class\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Let's create a simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Point\"), \" class for comparison. Note that since F# uses immutable data types by default, the example is also immutable for simplicity sake.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"// Point.cs\\nusing System;\\n\\nnamespace Example {\\n    public class Point {\\n        public int X { get; }\\n        public int Y { get; }\\n        public Point(int x, int y){\\n            X = x;\\n            Y = y;\\n        }\\n        /// <summary>\\n        /// Distance of this point from origin (0,0)\\n        /// </summary>\\n        public double CalculateDistance() => Math.Sqrt(X*X + Y*Y);\\n    }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In F#:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-fsharp\"\n  }, \"// Point.fs\\nmodule Example\\n\\ntype Point(x: int, y: int) =\\n    member my.X = x\\n    member my.Y = y\\n    \\n    /// Distance of this point from origin (0,0)\\n    member my.CalculateDistance() = sqrt(double(me.X * me.X + me.Y * me.Y))\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Much shorter and more pleasant code, isn't it? \\uD83D\\uDE06 Generally, writing a class in F# is shorter and terse due to its simpler syntaxes.  To define a class, use keyword \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" following by a class name and constructor parameters. This line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type Point(x: int, y: int)\"), \" declares the class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Point\"), \" and the constructor in one line, neat, right?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Next 2 lines defines \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Y\"), \" properties. Note that it can refer to the constructor's parameter right away! The word \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"my\"), \" is a custom identifier representing the object instance.  You can use any name on this part, F# doesn't have keyword \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \".  People often use the word \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" but, for me, I often use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"me\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"my\"), \" as it's shorter. \\uD83D\\uDE0A\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The last line is to define the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CalculateDistance\"), \", this one is very much like C#'s but shorter due to type omission, though you may notice that the method's body is longer.  This is because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Y\"), \" are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int\"), \" but to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sqrt\"), \" function, the parameter needs to be floating-point number.  So, that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"double()\"), \" function is actually a way to cast \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"double\"), \" in F#.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Private Member\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you don't specify, all F# declarations are public by default.  F# has only public or private access-level. To mark a member as private, put \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"private\"), \" keyword after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"member\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-fsharp\"\n  }, \"// Point.fs\\nmodule Example\\n\\ntype Point(x: int, y: int) =\\n    member my.X = x\\n    member my.Y = y\\n    \\n    // private method\\n    member private my.CalculatePower2() = double(me.X * me.X + me.Y * me.Y) \\n\\n    /// Distance of this point from origin (0,0)\\n    member my.CalculateDistance() = sqrt(my.CalculatePower2())\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Empty Class\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To implement an empty class, we must use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"full form\"), \" class declaration, which begins with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"class\"), \" and ends with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-fsharp\"\n  }, \"type EmptyClass() = class end\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Static Class??\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"What is comparable to C#'s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"static class\"), \" is F#'s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"module\"), \", for example:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public static class MyUtils {\\n    public static double Distance(int x, int y) => Math.Sqrt(X*X + Y*Y);\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This can be written as a function under a module:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-fsharp\"\n  }, \"module MyUtils =\\n    let Distance(x: int, y: int) = sqrt(double(x * x + y * y))\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"(Little note, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Distance\"), \" is not a proper conventional function name in F#, a proper one should be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"distance\"), \" -- camelCase.)\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Abstract Class\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Inheritance\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Property\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Method\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Extension Method\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Interface\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Anonymous Object from Interface\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Event\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Generic!\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#introduction","title":"Introduction"},{"url":"#class","title":"Class","items":[{"url":"#simple-class","title":"Simple Class","items":[{"url":"#private-member","title":"Private Member"},{"url":"#empty-class","title":"Empty Class"}]},{"url":"#static-class","title":"Static Class??"},{"url":"#abstract-class","title":"Abstract Class"},{"url":"#inheritance","title":"Inheritance"}]},{"url":"#property","title":"Property"},{"url":"#method","title":"Method","items":[{"url":"#extension-method","title":"Extension Method"}]},{"url":"#interface","title":"Interface","items":[{"url":"#anonymous-object-from-interface","title":"Anonymous Object from Interface"}]},{"url":"#event","title":"Event"},{"url":"#generic","title":"Generic!"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"to-other-languages/f-sharp-for-c-sharp-developers/oop-in-f-sharp.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"4f1134accef463612ee63776f407d76ae8ca575f","date":"2022-01-30 12:02"}},"pageContext":{"id":"00dc0ad1-2a8b-5d7c-9261-720bf49f1582"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}